// ========== √áEKƒ∞RDEK ==========
const {
  Client, GatewayIntentBits, Collection, REST, Routes,
  PermissionsBitField, ActionRowBuilder, ButtonBuilder, ButtonStyle,
  ChannelType, EmbedBuilder, AttachmentBuilder, Events, ModalBuilder, TextInputBuilder, TextInputStyle
} = require('discord.js');

const express = require('express');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const ms = require('ms');
dotenv.config();

const config = require('./config.json');

// ========== CLIENT ==========
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildPresences,
    GatewayIntentBits.DirectMessages,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.GuildModeration,
  ],
});

// ========== KOMUT Y√úKLEYƒ∞Cƒ∞ ==========
client.commands = new Collection();
const komutlarJSON = [];
const komutKlasoru = path.join(__dirname, 'commands');

try {
  if (fs.existsSync(komutKlasoru)) {
    const dosyalar = fs.readdirSync(komutKlasoru).filter(f => f.endsWith('.js'));
    for (const f of dosyalar) {
      const filePath = path.join(komutKlasoru, f);
      const cmd = require(filePath);
      if (cmd?.data && cmd?.execute) {
        client.commands.set(cmd.data.name, cmd);
        komutlarJSON.push(cmd.data.toJSON());
        console.log(`‚úÖ Komut y√ºklendi: ${cmd.data.name}`);
      } else {
        console.warn(`‚ö†Ô∏è Hatalƒ± komut dosyasƒ±: ${f}`);
      }
    }
  } else {
    console.warn('‚ö†Ô∏è ./commands klas√∂r√º bulunamadƒ±.');
  }
} catch (e) {
  console.error('‚ùå Komutlar y√ºklenemedi:', e);
}

// ========== YARDIMCI FONKSƒ∞YONLAR ==========
function getSeviye(member) {
  const names = member.roles.cache.map(r => r.name);
  const ust = (config.roles?.ust || []).some(n => names.includes(n));
  if (ust) return 'ust';
  const orta = (config.roles?.orta || []).some(n => names.includes(n));
  if (orta) return 'orta';
  const alt = (config.roles?.alt || []).some(n => names.includes(n));
  if (alt) return 'alt';
  const masum = (config.roles?.masum || []).some(n => names.includes(n));
  if (masum) return 'masum';
  return null;
}

function resolveStaffRoleIds(guild) {
  const allRoleNames = [...(config.roles?.ust || []), ...(config.roles?.orta || []), ...(config.roles?.alt || [])];
  const ids = new Set();
  for (const name of allRoleNames) {
    const role = guild.roles.cache.find(r => r.name === name);
    if (role) ids.add(role.id);
  }
  return [...ids];
}

// ========== HAZIRLIK VE Gƒ∞Rƒ∞≈û ==========
client.once(Events.ClientReady, async () => {
  console.log(`ü§ñ Bot aktif: ${client.user.tag}`);

  config.commands = config.commands || {};
  config.commands.ust = Array.from(client.commands.keys());

  try {
    const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);
    await rest.put(Routes.applicationCommands(client.user.id), { body: komutlarJSON });
    console.log('‚úÖ Slash komutlar y√ºklendi.');
  } catch (err) {
    console.error('‚ùå Slash komut y√ºkleme hatasƒ±:', err);
  }

  // Express
  const app = express();
  const PORT = Number(process.env.PORT) || 8080;
  app.get('/', (_req, res) => res.send('‚úÖ Bot √ßalƒ±≈üƒ±yor.'));
  app.listen(PORT, () => {
    console.log(`üåê Express portu dinleniyor: ${PORT}`);
  });
});

// ========== LOGS Sƒ∞STEMƒ∞ ==========
client.on(Events.VoiceStateUpdate, (oldState, newState) => {
    if (oldState.channelId === newState.channelId) return;
    const logChannel = client.channels.cache.get(config.logChannelId);
    if (!logChannel) return;

    if (oldState.channelId && !newState.channelId) {
        logChannel.send(`üî¥ ${oldState.member.displayName} ses kanalƒ±ndan ayrƒ±ldƒ±: **${oldState.channel.name}**`);
    } else if (!oldState.channelId && newState.channelId) {
        logChannel.send(`üü¢ ${newState.member.displayName} ses kanalƒ±na katƒ±ldƒ±: **${newState.channel.name}**`);
    } else {
        logChannel.send(`üîµ ${newState.member.displayName} ses kanalƒ±nƒ± deƒüi≈ütirdi: **${oldState.channel.name}** --> **${newState.channel.name}**`);
    }
});

// ========== OTOMATƒ∞K MODERASYON ==========
const bannedWords = ['salak', 'aptal', 'aq', 'orospu', 'pi√ß', 'yarrak', 'mk'];
const invitePattern = /(discord\.gg|discord\.com\/invite)\/[a-zA-Z0-9]+/g;
const spamMap = new Map();

client.on(Events.MessageCreate, async message => {
    if (message.author.bot || !message.guild) return;

    const messageContent = message.content.toLowerCase();

    // K√ºf√ºr kontrol√º
    if (bannedWords.some(word => messageContent.includes(word))) {
        await message.delete();
        message.channel.send(`Hey, ${message.author}! Bu kanalda bu kelimeleri kullanmak yasaktƒ±r.`).then(msg => setTimeout(() => msg.delete(), 5000));
        return;
    }

    // Reklam kontrol√º
    if (invitePattern.test(messageContent)) {
        await message.delete();
        message.channel.send(`Hey, ${message.author}! Ba≈üka bir sunucuya davet baƒülantƒ±sƒ± payla≈ümak yasaktƒ±r.`).then(msg => setTimeout(() => msg.delete(), 5000));
        return;
    }

    // Spam kontrol√º
    const now = Date.now();
    const userSpam = spamMap.get(message.author.id) || { count: 0, lastMessage: 0 };

    if (now - userSpam.lastMessage < 3000) {
        userSpam.count++;
        if (userSpam.count > 5) {
            await message.member.timeout(ms('1m'), 'Spam yapƒ±yor.');
            message.channel.send(`${message.author} spam yaptƒ±ƒüƒ± i√ßin 1 dakika susturuldu.`);
            userSpam.count = 0;
        }
    } else {
        userSpam.count = 1;
    }
    userSpam.lastMessage = now;
    spamMap.set(message.author.id, userSpam);
});

// ========== INTERACTION (T√úM KOMUT VE BUTONLARI Y√ñNETƒ∞R) ==========
client.on(Events.InteractionCreate, async (interaction) => {
    // Slash komutlarƒ±
    if (interaction.isChatInputCommand()) {
        const command = client.commands.get(interaction.commandName);
        if (!command) return;

        try {
            await command.execute(interaction);
        } catch (err) {
            console.error('Komut √ßalƒ±≈ütƒ±rma hatasƒ±:', err);
            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({ content: 'Komutu √ßalƒ±≈ütƒ±rƒ±rken bir hata olu≈ütu!', ephemeral: true });
            } else {
                await interaction.reply({ content: 'Komutu √ßalƒ±≈ütƒ±rƒ±rken bir hata olu≈ütu!', ephemeral: true });
            }
        }
    }

    // Buton etkile≈üimleri
    if (interaction.isButton()) {
        const id = interaction.customId;
        const staffRoleIds = resolveStaffRoleIds(interaction.guild);

        // Bilet olu≈üturma butonu (ticket sistemi)
        if (id === 'create_ticket') {
            const existing = interaction.guild.channels.cache.find(c => c.type === ChannelType.GuildText && c.name.startsWith(`ticket-${interaction.user.username.toLowerCase().replace(/[^a-z0-9]/g, '')}`));
            if (existing) return interaction.reply({ content: `‚ùå Zaten a√ßƒ±k bir biletin var: ${existing}`, ephemeral: true });

            const ch = await interaction.guild.channels.create({
                name: `ticket-${interaction.user.username.toLowerCase().replace(/[^a-z0-9]/g, '')}`,
                type: ChannelType.GuildText,
                parent: interaction.channel.parent,
                permissionOverwrites: [
                    { id: interaction.guild.id, deny: [PermissionsBitField.Flags.ViewChannel] },
                    { id: interaction.user.id, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory] },
                    ...staffRoleIds.map(rid => ({ id: rid, allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.ReadMessageHistory] }))
                ]
            });
            const row = new ActionRowBuilder().addComponents(new ButtonBuilder().setCustomId('ticket_close').setLabel('Kapat').setStyle(ButtonStyle.Danger));
            await ch.send({ embeds: [new EmbedBuilder().setTitle('üé´ Destek Talebi').setDescription('Merhaba! Sorununu/isteƒüini detaylƒ± yaz. Yetkililer kƒ±sa s√ºrede yardƒ±mcƒ± olacak.').setColor('Blue').setFooter({ text: `A√ßan: ${interaction.user.tag}` }).setTimestamp()], components: [row] });
            await interaction.reply({ content: `‚úÖ Bilet olu≈üturuldu: ${ch}`, ephemeral: true });
            return;
        }

        // Bilet kapatma butonu
        if (id === 'ticket_close') {
            if (!interaction.member.roles.cache.some(r => staffRoleIds.includes(r.id))) return interaction.reply({ content: 'Bu butonu sadece yetkililer kullanabilir.', ephemeral: true });
            if (!interaction.channel.name.startsWith('ticket-')) return interaction.reply({ content: 'Bu i≈ülem sadece bilet kanallarƒ±nda yapƒ±labilir.', ephemeral: true });
            await interaction.reply({ content: 'Bilet 5 saniye i√ßinde kapatƒ±lacak.', ephemeral: true });
            setTimeout(() => interaction.channel.delete(), 5000);
            return;
        }
    }

    // Modal g√∂nderme (ba≈üvuru formu i√ßin)
    if (interaction.isModalSubmit() && interaction.customId === 'kamp_basvuru_formu') {
        const robloxIsim = interaction.fields.getTextInputValue('robloxIsim');
        const discordIsim = interaction.fields.getTextInputValue('discordIsim');
        const kamplar = interaction.fields.getTextInputValue('gelinenKamplar');
        const grupUyeSayilari = interaction.fields.getTextInputValue('grupUyeSayilari');
        const tkaDurum = interaction.fields.getTextInputValue('tkaDurumu');
        const robloxGrupUyeligi = interaction.fields.getTextInputValue('robloxGrupUyeligi');
        const ssKanit = interaction.fields.getTextInputValue('ssKanit');

        const resultEmbed = new EmbedBuilder()
            .setColor('#2ecc71')
            .setTitle('üìù Yeni Kamp Ba≈üvurusu')
            .setDescription(`**Ba≈üvuran:** <@${interaction.user.id}> (${interaction.user.tag})`)
            .addFields(
                { name: 'Roblox ƒ∞smi', value: robloxIsim, inline: true },
                { name: 'Discord ƒ∞smi', value: discordIsim, inline: true },
                { name: 'Geldiƒüi Kamplar', value: kamplar },
                { name: 'Grup √úye Sayƒ±larƒ±', value: grupUyeSayilari },
                { name: 'Daha √ñnce TKA Ordusunda Bulundu mu?', value: tkaDurum },
                { name: 'Roblox Grup √úyeliƒüi', value: robloxGrupUyeligi },
                { name: 'SS/Kanƒ±t', value: ssKanit }
            )
            .setTimestamp();
        
        const logChannelId = 'BASVURU_LOG_KANAL_IDSI';
        try {
            const logChannel = await interaction.guild.channels.fetch(logChannelId);
            if (logChannel) {
                await logChannel.send({ embeds: [resultEmbed] });
                await interaction.reply({ content: 'Ba≈üvurunuz ba≈üarƒ±yla g√∂nderildi!', ephemeral: true });
            } else {
                 await interaction.reply({ content: `‚ùå Ba≈üvuru kanalƒ± bulunamadƒ±. L√ºtfen "BASVURU_LOG_KANAL_IDSI" deƒüerini doƒüru girdiƒüinizden emin olun.`, ephemeral: true });
            }
        } catch (error) {
            console.error(error);
            await interaction.reply({ content: 'Ba≈üvurunuz g√∂nderilirken bir hata olu≈ütu.', ephemeral: true });
        }
    }
});

// ========== HATA YAKALAMA ==========
process.on('uncaughtException', e => console.error('üö® Uncaught Exception:', e));
process.on('unhandledRejection', e => console.error('üö® Unhandled Rejection:', e));

// ========== Gƒ∞Rƒ∞≈û ==========
if (!process.env.TOKEN) {
  console.error('‚ùå .env i√ßine TOKEN koymalƒ±sƒ±n!');
  process.exit(1);
}
client.login(process.env.TOKEN);
