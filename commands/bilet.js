const { Client, GatewayIntentBits, PermissionsBitField, ChannelType, ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');

// Bot tokeninizi buraya yapÄ±ÅŸtÄ±rÄ±n.
const BOT_TOKEN = 'SÄ°ZÄ°N_BOT_TOKENÄ°NÄ°Z';

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

client.on('ready', () => {
    console.log(`Bot ${client.user.tag} olarak giriÅŸ yaptÄ±!`);
});

// Bilet aÃ§ma mesajÄ±nÄ± gÃ¶nderen komut
client.on('messageCreate', async message => {
    if (message.author.bot) return;

    if (message.content === '!ticketsetup') {
        // Embed mesajÄ± oluÅŸturma
        const embed = new EmbedBuilder()
            .setColor('#0099ff')
            .setTitle('Destek Bileti OluÅŸtur')
            .setDescription('Destek talebi oluÅŸturmak iÃ§in aÅŸaÄŸÄ±daki butona tÄ±klayÄ±n.')
            .setFooter({ text: '7/24 Destek Ekibi' });

        // Butonu oluÅŸturma
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('open_ticket')
                    .setLabel('Bilet AÃ§')
                    .setStyle(ButtonStyle.Primary)
                    .setEmoji('ðŸŽ«'),
            );

        message.channel.send({
            embeds: [embed],
            components: [row]
        });
    }
});

// Buton etkileÅŸimlerini dinleme
client.on('interactionCreate', async interaction => {
    if (!interaction.isButton()) return;

    // Bilet aÃ§ma butonu
    if (interaction.customId === 'open_ticket') {
        // Bilet kanalÄ±nÄ± oluÅŸturma
        const channel = await interaction.guild.channels.create({
            name: `ticket-${interaction.user.username}`,
            type: ChannelType.GuildText,
            parent: 'BÄ°LET_KANALLARININ_KATEGORÄ°_ID_SÄ°', // Biletlerin gideceÄŸi kategori ID'si
            permissionOverwrites: [
                {
                    id: interaction.guild.id,
                    deny: [PermissionsBitField.Flags.ViewChannel],
                },
                {
                    id: interaction.user.id,
                    allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
                },
                {
                    id: 'MODERATÃ–R_ROLÃœNÃœN_ID_SÄ°', // ModeratÃ¶r rolÃ¼nÃ¼n ID'si
                    allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.SendMessages],
                },
            ],
        });

        // KullanÄ±cÄ±ya bilet aÃ§tÄ±ÄŸÄ±nÄ± bildir
        interaction.reply({ content: `Biletiniz aÃ§Ä±ldÄ±: ${channel}`, ephemeral: true });

        // Bilet kanalÄ±ndaki mesajÄ± oluÅŸturma
        const ticketEmbed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('Yeni Destek Bileti')
            .setDescription(`Merhaba ${interaction.user}! Destek ekibimiz size en kÄ±sa sÃ¼rede yardÄ±mcÄ± olacaktÄ±r.`)
            .addFields(
                { name: 'KullanÄ±cÄ±', value: `${interaction.user.tag}` }
            );

        const closeButton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('Bileti Kapat')
                    .setStyle(ButtonStyle.Danger)
                    .setEmoji('ðŸ”’'),
            );

        channel.send({
            embeds: [ticketEmbed],
            components: [closeButton]
        });
    }

    // Bilet kapatma butonu
    if (interaction.customId === 'close_ticket') {
        // YalnÄ±zca moderatÃ¶rlerin veya bilet sahibinin kapatmasÄ±nÄ± saÄŸlama
        if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageChannels) && interaction.channel.name.split('-')[1] !== interaction.user.username) {
            return interaction.reply({ content: 'Bu bileti kapatma yetkiniz yok.', ephemeral: true });
        }

        // Bileti kapatmadan Ã¶nce onay alma
        const confirmButton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('confirm_close')
                    .setLabel('Onayla')
                    .setStyle(ButtonStyle.Danger),
                new ButtonBuilder()
                    .setCustomId('cancel_close')
                    .setLabel('Ä°ptal')
                    .setStyle(ButtonStyle.Secondary),
            );

        interaction.reply({ content: 'Bileti kapatmak istediÄŸinizden emin misiniz?', components: [confirmButton], ephemeral: true });
    }

    if (interaction.customId === 'confirm_close') {
        const channel = interaction.channel;
        interaction.reply('Bilet kapatÄ±lÄ±yor...').then(() => {
            setTimeout(() => channel.delete(), 5000); // 5 saniye sonra kanalÄ± sil
        });
    }

    if (interaction.customId === 'cancel_close') {
        interaction.update({ content: 'Bilet kapatma iÅŸlemi iptal edildi.', components: [] });
    }
});

client.login(BOT_TOKEN);
