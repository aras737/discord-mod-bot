const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ActionRowBuilder, ButtonStyle, PermissionFlagsBits } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('duyuru')
    .setDescription('Profesyonel duyuru gÃ¶nderir ve herkesi etiketler')
    .addStringOption(option =>
      option.setName('baslik')
        .setDescription('Duyuru baÅŸlÄ±ÄŸÄ±nÄ± girin')
        .setRequired(true)
        .setMaxLength(256)
    )
    .addStringOption(option =>
      option.setName('mesaj')
        .setDescription('Duyuru mesaj iÃ§eriÄŸini girin')
        .setRequired(true)
        .setMaxLength(4000)
    )
    .addStringOption(option =>
      option.setName('oncelik')
        .setDescription('Duyuru Ã¶ncelik seviyesini seÃ§in')
        .setRequired(false)
        .addChoices(
          { name: 'DÃ¼ÅŸÃ¼k Ã–ncelik', value: 'dusuk' },
          { name: 'Orta Ã–ncelik', value: 'orta' },
          { name: 'YÃ¼ksek Ã–ncelik', value: 'yuksek' },
          { name: 'Kritik', value: 'kritik' }
        )
    )
    .addBooleanOption(option =>
      option.setName('herkesi_etiketle')
        .setDescription('Bu duyuruda herkesi etiketlemek istiyor musunuz')
        .setRequired(false)
    )
    .setDefaultMemberPermissions(PermissionFlagsBits.ManageMessages),

  async execute(interaction) {
    try {
      // KullanÄ±cÄ±nÄ±n uygun yetkisi olup olmadÄ±ÄŸÄ±nÄ± kontrol et
      if (!interaction.member.permissions.has(PermissionFlagsBits.ManageMessages)) {
        return await interaction.reply({
          content: 'Duyuru gÃ¶nderme yetkiniz bulunmamaktadÄ±r. Gerekli yetki: MesajlarÄ± YÃ¶net',
          ephemeral: true
        });
      }

      const baslik = interaction.options.getString('baslik');
      const mesaj = interaction.options.getString('mesaj');
      const oncelik = interaction.options.getString('oncelik') || 'orta';
      const herkesiEtiketle = interaction.options.getBoolean('herkesi_etiketle') ?? true;

      // Ã–ncelik yapÄ±landÄ±rmalarÄ±nÄ± tanÄ±mla
      const oncelikYapisi = {
        dusuk: {
          renk: '#95a5a6',
          etiket: 'DÃ¼ÅŸÃ¼k Ã–ncelik',
          ikon: 'ğŸ”µ'
        },
        orta: {
          renk: '#f39c12',
          etiket: 'Orta Ã–ncelik',
          ikon: 'ğŸŸ¡'
        },
        yuksek: {
          renk: '#e74c3c',
          etiket: 'YÃ¼ksek Ã–ncelik',
          ikon: 'ğŸ”´'
        },
        kritik: {
          renk: '#8b0000',
          etiket: 'Kritik UyarÄ±',
          ikon: 'ğŸš¨'
        }
      };

      const yapilandirma = oncelikYapisi[oncelik];

      // Duyuru embed'ini oluÅŸtur
      const duyuruEmbed = new EmbedBuilder()
        .setTitle(`${yapilandirma.ikon} ${baslik}`)
        .setDescription(mesaj)
        .setColor(yapilandirma.renk)
        .addFields(
          {
            name: 'Ã–ncelik Seviyesi',
            value: yapilandirma.etiket,
            inline: true
          },
          {
            name: 'Duyuran KiÅŸi',
            value: `${interaction.user.tag}`,
            inline: true
          },
          {
            name: 'Sunucu',
            value: `${interaction.guild.name}`,
            inline: true
          }
        )
        .setTimestamp()
        .setFooter({
          text: `Duyuru KimliÄŸi: ${interaction.id}`,
          iconURL: interaction.guild.iconURL()
        });

      // Eylem butonlarÄ±nÄ± oluÅŸtur
      const okuduButonu = new ButtonBuilder()
        .setCustomId(`okudum_${interaction.id}`)
        .setLabel('Okudum Ä°ÅŸaretle')
        .setStyle(ButtonStyle.Success);

      const onemliButonu = new ButtonBuilder()
        .setCustomId(`onemli_${interaction.id}`)
        .setLabel('Ã–nemli Ä°ÅŸaretle')
        .setStyle(ButtonStyle.Primary);

      const paylasButonu = new ButtonBuilder()
        .setCustomId(`paylas_${interaction.id}`)
        .setLabel('Duyuruyu PaylaÅŸ')
        .setStyle(ButtonStyle.Secondary);

      const eylemSatiri = new ActionRowBuilder()
        .addComponents(okuduButonu, onemliButonu, paylasButonu);

      // YanÄ±t iÃ§eriÄŸini hazÄ±rla
      let yanitIcerigi = '';
      if (herkesiEtiketle) {
        yanitIcerigi = '@everyone\n\n**Yeni Sunucu Duyurusu**';
      } else {
        yanitIcerigi = '**Yeni Sunucu Duyurusu**';
      }

      // Duyuruyu gÃ¶nder
      await interaction.reply({
        content: yanitIcerigi,
        embeds: [duyuruEmbed],
        components: [eylemSatiri]
      });

      // Duyuruyu konsola kaydet
      console.log(`${interaction.user.tag} tarafÄ±ndan ${interaction.guild.name} sunucusunda duyuru gÃ¶nderildi: ${baslik}`);

    } catch (hata) {
      console.error('Duyuru komutu Ã§alÄ±ÅŸtÄ±rÄ±lÄ±rken hata oluÅŸtu:', hata);
      
      const hataEmbed = new EmbedBuilder()
        .setTitle('Komut HatasÄ±')
        .setDescription('Duyurunuz iÅŸlenirken bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.')
        .setColor('#e74c3c')
        .setTimestamp();

      if (interaction.replied || interaction.deferred) {
        await interaction.followUp({ embeds: [hataEmbed], ephemeral: true });
      } else {
        await interaction.reply({ embeds: [hataEmbed], ephemeral: true });
      }
    }
  },

  // Buton etkileÅŸimlerini yÃ¶net
  async butonEtkilesiminiYonet(interaction) {
    if (!interaction.isButton()) return;

    const [eylem, duyuruKimligi] = interaction.customId.split('_');

    try {
      switch (eylem) {
        case 'okudum':
          await interaction.reply({
            content: 'Bu duyuruyu okundu olarak iÅŸaretlediniz. Ä°lginiz iÃ§in teÅŸekkÃ¼r ederiz.',
            ephemeral: true
          });
          break;

        case 'onemli':
          await interaction.reply({
            content: 'Bu duyuruyu Ã¶nemli olarak iÅŸaretlediniz. Ã–nemli mesajlarÄ±nÄ±za kaydedilecektir.',
            ephemeral: true
          });
          break;

        case 'paylas':
          const paylasEmbed = new EmbedBuilder()
            .setTitle('Duyuruyu PaylaÅŸ')
            .setDescription('Bu duyuruyu mesaj baÄŸlantÄ±sÄ±nÄ± kopyalayarak veya diÄŸer kanallarda bahsederek paylaÅŸabilirsiniz.')
            .setColor('#3498db')
            .addFields({
              name: 'Mesaj BaÄŸlantÄ±sÄ±',
              value: `[Duyuruyu gÃ¶rÃ¼ntÃ¼lemek iÃ§in tÄ±klayÄ±n](https://discord.com/channels/${interaction.guildId}/${interaction.channelId}/${interaction.message.id})`
            });

          await interaction.reply({
            embeds: [paylasEmbed],
            ephemeral: true
          });
          break;

        default:
          await interaction.reply({
            content: 'Bilinmeyen eylem. LÃ¼tfen tekrar deneyin.',
            ephemeral: true
          });
      }
    } catch (hata) {
      console.error('Buton etkileÅŸimi yÃ¶netilirken hata oluÅŸtu:', hata);
      await interaction.reply({
        content: 'Ä°steÄŸiniz iÅŸlenirken bir hata oluÅŸtu.',
        ephemeral: true
      });
    }
  }
};
