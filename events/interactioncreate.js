const {
  PermissionsBitField,
  EmbedBuilder,
  ChannelType,
  InteractionType,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  StringSelectMenuBuilder
} = require('discord.js');

module.exports = {
  name: 'interactionCreate',
  async execute(interaction, client) {
    try {
      // ‚úÖ SLASH KOMUTLAR
      if (interaction.isChatInputCommand()) {
        const { commandName } = interaction;

        // üî® Ban Komutu
        if (commandName === 'ban') {
          if (!interaction.member.permissions.has(PermissionsBitField.Flags.BanMembers))
            return interaction.reply({ content: '‚ùå Ban yetkiniz yok!', ephemeral: true });

          const user = interaction.options.getUser('kullanici');
          const reason = interaction.options.getString('sebep') || 'Sebep belirtilmedi';
          if (!user) return interaction.reply({ content: '‚ùå Kullanƒ±cƒ± se√ßmelisiniz!', ephemeral: true });

          try {
            const member = await interaction.guild.members.fetch(user.id);
            if (!member.bannable)
              return interaction.reply({ content: '‚ùå Bu kullanƒ±cƒ±yƒ± banlayamam!', ephemeral: true });

            await member.ban({ reason });
            try { await user.send(`üö´ ${interaction.guild.name} sunucusundan banlandƒ±nƒ±z. Sebep: ${reason}`); } catch {}
            return interaction.reply({ content: `‚úÖ ${user.tag} sunucudan banlandƒ±. Sebep: ${reason}` });
          } catch (err) {
            console.error('Ban hatasƒ±:', err);
            return interaction.reply({ content: '‚ùå Ban i≈ülemi ba≈üarƒ±sƒ±z oldu!', ephemeral: true });
          }
        }

        // üë¢ Kick Komutu
        else if (commandName === 'kick') {
          if (!interaction.member.permissions.has(PermissionsBitField.Flags.KickMembers))
            return interaction.reply({ content: '‚ùå Kick yetkiniz yok!', ephemeral: true });

          const user = interaction.options.getUser('kullanici');
          const reason = interaction.options.getString('sebep') || 'Sebep belirtilmedi';
          if (!user) return interaction.reply({ content: '‚ùå Kullanƒ±cƒ± se√ßmelisiniz!', ephemeral: true });

          try {
            const member = await interaction.guild.members.fetch(user.id);
            if (!member.kickable)
              return interaction.reply({ content: '‚ùå Bu kullanƒ±cƒ±yƒ± atamam!', ephemeral: true });

            await member.kick(reason);
            try { await user.send(`‚ö†Ô∏è ${interaction.guild.name} sunucusundan atƒ±ldƒ±nƒ±z. Sebep: ${reason}`); } catch {}
            return interaction.reply({ content: `‚úÖ ${user.tag} ba≈üarƒ±yla atƒ±ldƒ±. Sebep: ${reason}` });
          } catch (err) {
            console.error('Kick hatasƒ±:', err);
            return interaction.reply({ content: '‚ùå Kick i≈ülemi ba≈üarƒ±sƒ±z oldu!', ephemeral: true });
          }
        }

        // üì£ Duyuru Komutu
        else if (commandName === 'duyuru') {
          if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageMessages))
            return interaction.reply({ content: '‚ùå Duyuru i√ßin yetkiniz yok!', ephemeral: true });

          const kanal = interaction.options.getChannel('kanal');
          const mesaj = interaction.options.getString('mesaj');
          if (!kanal || kanal.type !== ChannelType.GuildText)
            return interaction.reply({ content: '‚ùå Ge√ßerli bir metin kanalƒ± se√ßmelisiniz!', ephemeral: true });

          const embed = new EmbedBuilder()
            .setTitle('üì¢ Yeni Duyuru')
            .setDescription(mesaj)
            .setColor('Gold')
            .setFooter({ text: `Duyuru: ${interaction.user.tag}` })
            .setTimestamp();

          try {
            await kanal.send({ content: '@everyone', embeds: [embed] });
            return interaction.reply({ content: `‚úÖ Duyuru g√∂nderildi: ${kanal}`, ephemeral: true });
          } catch (err) {
            console.error('Duyuru hatasƒ±:', err);
            return interaction.reply({ content: '‚ùå Duyuru g√∂nderilemedi.', ephemeral: true });
          }
        }
      }

      // ‚úÖ Bƒ∞LET PANEL BUTONU
      if (interaction.isButton() && interaction.customId === 'open_ticket_menu') {
        await interaction.deferUpdate();

        const menu = new StringSelectMenuBuilder()
          .setCustomId('ticket_menu')
          .setPlaceholder('Bir kategori se√ßin')
          .addOptions([
            { label: 'Genel Destek', value: 'genel' },
            { label: 'Satƒ±n Alma', value: 'satin_alma' },
            { label: '≈ûikayet', value: 'sikayet' },
          ]);

        const row = new ActionRowBuilder().addComponents(menu);

        return interaction.followUp({
          content: 'üìã L√ºtfen bir kategori se√ßin:',
          components: [row],
          ephemeral: true,
        });
      }

      // ‚úÖ Bƒ∞LET MEN√úS√ú SE√áƒ∞LDƒ∞
      if (interaction.isStringSelectMenu() && interaction.customId === 'ticket_menu') {
        await interaction.deferReply({ ephemeral: true });

        const kategori = interaction.values[0];
        const existing = interaction.guild.channels.cache.find(c =>
          c.name === `ticket-${interaction.user.id}`
        );
        if (existing) {
          return interaction.editReply({ content: `‚ùå Zaten a√ßƒ±k bir biletin var: ${existing}` });
        }

        const ticketCategory = interaction.guild.channels.cache.find(c =>
          c.type === ChannelType.GuildCategory && c.name.toLowerCase().includes('bilet')
        );

        const destekRolId = 'DESTEK_ROLE_ID'; // üéØ BURAYI DEƒûƒ∞≈ûTƒ∞R

        const channel = await interaction.guild.channels.create({
          name: `ticket-${interaction.user.id}`,
          type: ChannelType.GuildText,
          parent: ticketCategory?.id || null,
          permissionOverwrites: [
            {
              id: interaction.guild.roles.everyone.id,
              deny: [PermissionsBitField.Flags.ViewChannel],
            },
            {
              id: interaction.user.id,
              allow: [
                PermissionsBitField.Flags.ViewChannel,
                PermissionsBitField.Flags.SendMessages,
                PermissionsBitField.Flags.ReadMessageHistory,
              ],
            },
            {
              id: destekRolId,
              allow: [
                PermissionsBitField.Flags.ViewChannel,
                PermissionsBitField.Flags.SendMessages,
                PermissionsBitField.Flags.ReadMessageHistory,
              ],
            },
          ],
        });

        const bilgi = new EmbedBuilder()
          .setTitle('üé´ Bilet A√ßƒ±ldƒ±')
          .setDescription(`Kategori: **${kategori.toUpperCase()}**\nL√ºtfen detay verin, destek ekibi yakƒ±nda sizinle ilgilenecek.`)
          .setColor('Blue');

        const kurallar = new EmbedBuilder()
          .setTitle('üìú Kurallar')
          .setDescription('‚Ä¢ Saygƒ±lƒ± olun\n‚Ä¢ Spam yapmayƒ±n\n‚Ä¢ Sabƒ±rlƒ± olun\n‚Ä¢ Yetkilileri etiketlemeyin.')
          .setColor('Orange');

        const kapat = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId('ticket_kapat')
            .setLabel('üîí Bileti Kapat')
            .setStyle(ButtonStyle.Danger)
        );

        await channel.send({
          content: `${interaction.user}`,
          embeds: [bilgi, kurallar],
          components: [kapat],
        });

        await interaction.editReply({ content: `‚úÖ Bilet olu≈üturuldu: ${channel}` });
      }

      // ‚úÖ Bƒ∞LET KAPATMA BUTONU
      if (interaction.isButton() && interaction.customId === 'ticket_kapat') {
        await interaction.reply({ content: 'üì™ 5 saniye i√ßinde bilet kapatƒ±lƒ±yor...', ephemeral: true });
        setTimeout(() => {
          interaction.channel.delete().catch(() => {});
        }, 5000);
      }

    } catch (err) {
      console.error('interactionCreate genel hata:', err);
      if (
        interaction.type === InteractionType.ApplicationCommand &&
        !interaction.replied
      ) {
        await interaction.reply({ content: '‚ùå Bir hata olu≈ütu.', ephemeral: true });
      }
    }
  },
};
